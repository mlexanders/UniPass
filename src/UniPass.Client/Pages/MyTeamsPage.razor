@page "/My-Teams"
@using UniPass.Client.Utils
@using UniPass.Infrastructure.Models
@using UniPass.Client.Services.Api
@using UniPass.Client.Components.FolderComponents
@using UniPass.Client.Components.KeyComponents
@using UniPass.Client.Components.TeamsComponents
@inject DialogService DialogService
@inject NotificationService NotificationService
@inject TeamService TeamService
@inject KeyService KeyService

<RadzenRow AlignItems="AlignItems.Center" Class="rz-mb-2" Gap="0.3rem">

    <RadzenColumn>
        <RadzenButton Icon="add_circle_outline" Text="Добавить" Click="@OnCreateTeam" Variant="Variant.Flat"/>
    </RadzenColumn>

    <RadzenColumn>
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center" Gap="0.5rem">
            <h3>Мои команды</h3>
        </RadzenStack>
    </RadzenColumn>

</RadzenRow>


<div class="container-fluid rz-p-1">
    <RadzenRow>
        <RadzenColumn>
            <RadzenDataGrid TItem="Team"
                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                            AllowPaging="true" PageSize="@_pageSize" bind-Value="_selectedTeam"
                            AllowSorting="true" ColumnWidth="200px" IsLoading="@_isLoading" Count="@_count"
                            SelectionMode="DataGridSelectionMode.Single"
                            Data="@_teams" LoadData="@LoadData" RowSelect="@ShowTeamModal">
                <Template Context="team">
                    <MyTeamsFolderList Team="team" @bind-SelectedKey="_selectedKey" IsOwner="true"/>
                </Template>

                <Columns>
                    <RadzenDataGridColumn Property="Name" Title="Команды"/>
                </Columns>
            </RadzenDataGrid>
        </RadzenColumn>
        <RadzenColumn>
            <RadzenStack>
                <KeyTabs OnKeyUpdate="@UpdateKey" OnKeyDelete="@DeleteKey" SelectedKey="@(_selectedKey?.First())" EditingEnabled="true" DeletingEnabled="true"></KeyTabs>
            </RadzenStack>
        </RadzenColumn>
    </RadzenRow>
</div>


@code {
    private IEnumerable<Team> _teams;
    private IList<Team> _selectedTeam;
    private bool _isLoading;
    private readonly int _pageSize = 5;
    private int _count;

    private IList<Key> _selectedKey;
    // public Key GetSelectedKey() => _selectedKey.Any() ? _selectedKey.First() : new Key();


    protected override async Task OnInitializedAsync()
    {
        await LoadPage(_pageSize, 0);
    }

    private async Task LoadData(LoadDataArgs args)
    {
        await LoadPage(args.Top, args.Skip);
    }

    private async Task LoadPage(int? top, int? skip)
    {
        try
        {
            var page = await TeamService.GetTeamsPage(_pageSize, top, skip);
            _teams = page.Items;
            _count = page.Count;
        }
        catch (Exception e)
        {
            NotificationService.ShowExceptionNotification(e);
        }
    }

    private async Task ShowTeamModal(Team team)
    {
        var a = 13 - 2;
        var result = await DialogService.OpenAsync<TeamModal>($"Команда: {team.Name}",
            new Dictionary<string, object> { { "Team", team } },
            new DialogOptions { Width = "700px", Height = "512px", Resizable = true, Draggable = true });
    }

    private async Task OnCreateTeam()
    {
        var result = await DialogService.OpenAsync<CreateTeamModal>("Создание новой команды",
            new Dictionary<string, object>(),
            new DialogOptions { Width = "auto", Resizable = true, Draggable = true });
    }

    private async Task UpdateKey(Key key)
    {
        if (key is null) return;

        var result = await KeyService.Update(key);

        if (!result.Success)
        {
            NotificationService.ShowNotification("Ошибка", result.Message, NotificationSeverity.Error);
            return;
        }

        NotificationService.ShowNotification("Уведомление", result.Message, NotificationSeverity.Success);
    }

    private async Task DeleteKey(Key key)
    {
        if (key is null) return;

        var result = await KeyService.Delete(key.Id);

        if (!result.Success)
        {
            NotificationService.ShowNotification("Ошибка", result.Message, NotificationSeverity.Error);
            return;
        }

        NotificationService.ShowNotification("Уведомление", result.Message, NotificationSeverity.Success);
    }

}