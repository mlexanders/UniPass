@page "/reg"
@using UniPass.Client.Utils
@using UniPass.Infrastructure.ViewModels
@using UniPass.Client.Services.Api
@using UniPass.Client.Layout
@inject UserService UserService
@inject NotificationService NotificationService
@inject NavigationManager NavigationManager
@layout LoginLayout
@attribute [AllowAnonymous]


<RadzenTemplateForm TItem="RegisterViewModel" Data="@_model" Submit="@(async () => { await Submit(); })">
    <RadzenRow>
        <RadzenColumn>
            <RadzenStack>
                <RadzenFieldset Text="Регистрация">
                    <RadzenStack Gap="1rem">

                        <RadzenFormField Text="email" Variant="@_variant">
                            <ChildContent>
                                <RadzenTextBox @bind-Value="@_model.Email" ReadOnly="@_isReadonlyForm"/>
                            </ChildContent>
                            <Helper>
                                <RadzenRequiredValidator Text="@_requiredMessage" Popup="@_popup"></RadzenRequiredValidator>
                            </Helper>
                        </RadzenFormField>

                        <RadzenFormField Text="Имя" Variant="@_variant">
                            <ChildContent>
                                <RadzenTextBox @bind-Value="@_model.FirstName" ReadOnly="@_isReadonlyForm"/>
                            </ChildContent>
                            <Helper>
                                <RadzenRequiredValidator Text="@_requiredMessage" Popup="@_popup"></RadzenRequiredValidator>
                            </Helper>
                        </RadzenFormField>

                        <RadzenFormField Text="Фаммилия" Variant="@_variant">
                            <ChildContent>
                                <RadzenTextBox @bind-Value="@_model.LastName" ReadOnly="@_isReadonlyForm"/>
                            </ChildContent>
                            <Helper>
                                <RadzenRequiredValidator Text="@_requiredMessage" Popup="@_popup"></RadzenRequiredValidator>
                            </Helper>
                        </RadzenFormField>


                        <RadzenFormField Text="Пароль" Variant="@_variant">
                            <ChildContent>
                                <RadzenTextBox @bind-Value="@_model.Password" Visible="@(!_showPassword)" ReadOnly="@_isReadonlyForm"/>
                                <RadzenPassword @bind-Value="@_model.Password" AutoComplete="false" Visible="@_showPassword" ReadOnly="@_isReadonlyForm"/>
                            </ChildContent>
                            <End>
                                <RadzenButton Icon="@(_showPassword ? "visibility" : "visibility_off")" Click="TogglePassword" Variant="Variant.Text" Size="ButtonSize.Small"/>
                            </End>
                            <Helper>
                                <RadzenRequiredValidator Text="@_requiredMessage" Popup="@_popup"></RadzenRequiredValidator>
                            </Helper>
                        </RadzenFormField>


                    </RadzenStack>
                    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="1rem" Class="rz-mt-8 rz-mb-2">
                        <RadzenButton ButtonType="ButtonType.Submit" Size="ButtonSize.Medium" Icon="save" Text="Зарегистрироваться" IsBusy="_isBusy"/>
                        <RadzenButton Size="ButtonSize.Medium" Icon="" Text="Назад" Click="@Cancel" IsBusy="_isBusy"/>
                    </RadzenStack>
                </RadzenFieldset>
            </RadzenStack>
        </RadzenColumn>
    </RadzenRow>
</RadzenTemplateForm>


@code {
    private readonly Variant _variant = Variant.Filled;
    private bool _showPassword = true;
    private readonly bool _popup = false;
    private bool _isBusy;
    private readonly bool _isReadonlyForm = false;
    private readonly string _requiredMessage = "Обязательно для заполенения";
    private RegisterViewModel _model = new();


    protected override void OnInitialized()
    {
        _model = new RegisterViewModel();
    }

    private async Task Submit()
    {
        try
        {
            _isBusy = true;
            if (_model is null)
            {
                return;
            }

            var result = await UserService.Register(_model);
            if (!result.Success)
            {
                NotificationService.ShowNotification("Ошибка", result.Message, NotificationSeverity.Error);
                return;
            }

            NotificationService.ShowNotification("Уведомление", result.Message, NotificationSeverity.Success);
            NavigationManager.NavigateTo("/login");
        }
        catch (Exception e)
        {
            NotificationService.ShowExceptionNotification(e);
            _isBusy = false;
        }
        finally
        {
            _isBusy = false;
        }
    }

    private void TogglePassword()
    {
        _showPassword = !_showPassword;
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/login");
    }
}