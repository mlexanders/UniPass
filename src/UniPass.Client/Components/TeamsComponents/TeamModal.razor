@using UniPass.Infrastructure.Models
@using UniPass.Client.Services.Api
@using UniPass.Client.Utils
@inject DialogService DialogService
@inject TeamService TeamService
@inject NotificationService NotificationService

<RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="10px" class="mt-2 mb-4">
    <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle_outline" Text="Добавить" Click="@AddWorker"/>
</RadzenStack>

<RadzenDataGrid @ref="_usersGrid" AllowAlternatingRows="false" AllowPaging="true" PageSize="5" AllowSorting="true" EditMode="@_editMode"
                Data="@_workers" TItem="ApplicationUserModel" ColumnWidth="200px" EmptyText="Тут пока пусто">
    <Columns>
        <RadzenDataGridColumn Property="Email" Title="email">
        </RadzenDataGridColumn>

        <RadzenDataGridColumn Context="user" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Frozen="true" FrozenPosition="FrozenColumnPosition.Right">
            <Template Context="user">
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1"
                              Click="@(args => DeleteRow(user))" @onclick:stopPropagation="true">
                </RadzenButton>
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {
    [Parameter] public Team Team { get; set; }

    private RadzenDataGrid<ApplicationUserModel> _usersGrid;
    private IEnumerable<ApplicationUserModel> _workers;

    private DataGridEditMode _editMode = DataGridEditMode.Single;


    protected override async Task OnInitializedAsync()
    {
        try
        {
            await base.OnInitializedAsync();

            var result = await TeamService.ReadFirst(Team.Id, "Workers");
            if (result.Success)
            {
                _workers = result.Value.Workers ?? [];
            }
        }
        catch (Exception e)
        {
            NotificationService.ShowExceptionNotification(e);
        }
    }

    private async Task DeleteRow(ApplicationUserModel userModel)
    {
        try
        {
            var result = await TeamService.DeleteWorker(Team.Id, userModel.Id);
            if (!result.Success)
            {
                NotificationService.ShowNotification("Запись не была удалена", result.Message, NotificationSeverity.Error);
            }

            NotificationService.ShowNotification("Запись успешно удалена", $"{userModel.Email} удален из команды", NotificationSeverity.Success);

            var updatedTeam = result.Value;

            _workers = updatedTeam.Workers;
            await _usersGrid.Reload();
        }
        catch (Exception e)
        {
            NotificationService.ShowExceptionNotification(e);
        }
    }

    private async Task AddWorker()
    {
        var result = await DialogService.OpenAsync<AddWorkerToTeamModal>($"Добавление в команду {Team.Name}",
            new Dictionary<string, object>() { { "Team", Team } },
            new DialogOptions()
            {
                Height = "auto",
                Resizable = true, Draggable = true
            });

        if (result is null) return;

        var updatedTeam = result as Team;

        _workers = updatedTeam!.Workers;
        await _usersGrid.Reload();
    }

}