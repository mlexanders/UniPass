@using UniPass.Domain
@using UniPass.Client.Utils
@using UniPass.Infrastructure.Models

<RadzenTemplateForm TItem="Team" Data="@_team" Submit="@(async (Team args) => { await Submit(args); })">
    <RadzenRow>
        <RadzenColumn>
            <RadzenStack>
                <RadzenStack Gap="1rem">

                    <RadzenFormField Text="Название" Variant="@_variant">
                        <ChildContent>
                            <RadzenTextBox @bind-Value="@_team.Name" ReadOnly="@IsReadonlyForm"/>
                        </ChildContent>
                        <Helper>
                            <RadzenRequiredValidator Text="@RequiredMessage" Popup=@_popup></RadzenRequiredValidator>
                        </Helper>
                    </RadzenFormField>

                </RadzenStack>
                <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="1rem" Class="rz-mt-8 rz-mb-2">
                    <RadzenButton ButtonType="ButtonType.Submit" Size="ButtonSize.Medium" Icon="save" Text="Сохранить" IsBusy="_isBusy"/>
                    <RadzenButton ButtonStyle="ButtonStyle.Light" Variant="Variant.Filled" Size="ButtonSize.Medium" Icon="cancel" Text="Отмена" Click="@Cancel"/>
                </RadzenStack>
            </RadzenStack>
        </RadzenColumn>
    </RadzenRow>
</RadzenTemplateForm>

@code {
    private readonly Variant _variant = Variant.Filled;
    private readonly bool _popup = false;
    private bool _isBusy;
    private const bool IsReadonlyForm = false;
    private const string RequiredMessage = "Обязательно для заполенения";
    private Team _team;

    [Parameter] public Team Team { get; set; } = new();
    
    // [Parameter]
    // public string Text
    // {
    //     get => _text;
    //     set => _text = value;
    // }

    [Parameter] public EventCallback<Team> OnSubmit { get; set; }

    protected override void OnInitialized() => _team = Team.Copy();

    private async Task Submit(Team team)
    {
        _isBusy = true;
        Team.Map(_team);
        await OnSubmit.InvokeAsync(Team);
        _isBusy = false;
    }

    private void Cancel()
    {
        _team.Map(Team);
        OnSubmit.InvokeAsync();
    }
}