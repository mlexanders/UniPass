@using UniPass.Client.Services.Api
@using UniPass.Client.Utils
@using UniPass.Client.Components.KeyComponents
@using UniPass.Domain
@inject DialogService DialogService
@inject KeyService KeyService
@inject NotificationService NotificationService


<div class="container-fluid rz-p-1">
    <RadzenRow>
        <RadzenColumn>
            <FolderList Folders="Folders" OnFolderCreate="@CreateFolder" OnKeyCreate="@CreateKey" @bind-SelectedKey="@_selectedKey"></FolderList>
        </RadzenColumn>
        <RadzenColumn>
            <RadzenStack>
                <KeyTabs OnKeyUpdate="@UpdateKey" SelectedKey="@(_selectedKey?.First())" EditingEnabled="true"></KeyTabs>
            </RadzenStack>
        </RadzenColumn>
    </RadzenRow>
</div>


@code {
    [Parameter] public List<Folder> Folders { get; set; }
    private IList<Key> _selectedKey;

    private async Task CreateKey(Folder folder)
    {
        var result = await DialogService.OpenAsync<CreateKeyModal>($"",
            new Dictionary<string, object>() { { "FolderId", folder.Id } },
            new DialogOptions() { Width = "auto", Resizable = true, Draggable = true });
        if (result is null) return;

        var newKey = result as Key;
        
        //Update keyList inside folder
        var updatedFolder = Folders.FirstOrDefault(f => f.Id.Equals(folder.Id));
        if (updatedFolder!.Keys?.Any() == true)
        {
            updatedFolder!.Keys.Add(newKey);
        }
        else
        {
            updatedFolder.Keys = [newKey];
        }
    }

    private async Task CreateFolder()
    {
        var result = await DialogService.OpenAsync<CreateFolderModal>($"Создание новой папки",
            new Dictionary<string, object>() { },
            new DialogOptions() { Width = "auto", Resizable = true, Draggable = true });

        if (result is null) return;

        Folders.Add(result as Folder);
    }

    private async Task UpdateKey(Key key)
    {
        if (key is null) return;

        var result = await KeyService.Update(key);

        if (!result.Success)
        {
            NotificationService.ShowNotification("Ошибка", result.Message, NotificationSeverity.Error);
            return;
        }

        NotificationService.ShowNotification("Уведомление", result.Message, NotificationSeverity.Success);
    }
}