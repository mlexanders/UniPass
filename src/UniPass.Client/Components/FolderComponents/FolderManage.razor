@using UniPass.Client.Services.Api
@using UniPass.Client.Utils
@using UniPass.Client.Components.KeyComponents
@using UniPass.Domain
@inject DialogService DialogService
@inject KeyService KeyService
@inject NotificationService NotificationService

<div class="container-fluid rz-p-1">
    <RadzenRow>
        <RadzenColumn>
            <FolderList Folders="Folders" OnFolderCreate="@OnFolderCreate" OnKeyCreate="@OnCreateKey" @bind-SelectedKey="@_selectedKey" ></FolderList>
        </RadzenColumn>
        <RadzenColumn>
            <RadzenStack>
                <RadzenTabs>
                    <Tabs>
                        <RadzenTabsItem Disabled="@(!TabsIsEnabled())" Icon="info">
                            @if (_selectedKey != null)
                            {
                                <RadzenStack>
                                    <KeyCard Key="@(_selectedKey!.FirstOrDefault() ?? new Key())"/>
                                </RadzenStack>
                            }
                        </RadzenTabsItem>
                        <RadzenTabsItem Disabled="@(!TabsIsEnabled())" Icon="edit">
                            <KeyForm Text="Редактирование" Key="@(_selectedKey!.FirstOrDefault() ?? new Key())" OnSubmit="OnUpdateKey"></KeyForm>
                        </RadzenTabsItem>
                    </Tabs>
                </RadzenTabs>
            </RadzenStack>
        </RadzenColumn>
    </RadzenRow>
</div>


@code {
    [Parameter] public IEnumerable<Folder> Folders { get; set; }

    private IList<Key> _selectedKey;
    private bool TabsIsEnabled() => _selectedKey != null && _selectedKey.Count != 0;


    private async Task OnCreateKey(Folder folder)
    {
        var result = await DialogService.OpenAsync<CreateKeyModal>($"",
            new Dictionary<string, object>() { { "FolderId", folder.Id } },
            new DialogOptions() { Width = "auto", Resizable = true, Draggable = true });
    }

    private async Task OnFolderCreate()
    {
        var result = await DialogService.OpenAsync<CreateFolderModal>($"Создание новой папки",
            new Dictionary<string, object>() { },
            new DialogOptions() { Width = "auto", Resizable = true, Draggable = true });

        if (result is null) return;

        Folders = Folders.Append(result as Folder);
    }

    private async Task OnUpdateKey(Key key)
    {
        if (key is null) return;

        var result = await KeyService.Update(key);

        if (!result.Success)
        {
            NotificationService.ShowNotification("Ошибка", result.Message, NotificationSeverity.Error);
            return;
        }

        NotificationService.ShowNotification("Уведомление", result.Message, NotificationSeverity.Success);
    }

}