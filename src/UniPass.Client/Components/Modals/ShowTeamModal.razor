@using UniPass.Infrastructure.Models
@using UniPass.Client.Services.Api
@using UniPass.Client.Utils
@inject DialogService DialogService
@inject TeamService TeamService
@inject NotificationService NotificationService

<RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="10px" class="mt-2 mb-4">
    <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle_outline" Text="Добавить" Click="@InsertRow" Disabled="@(_editMode == DataGridEditMode.Single && ordersToInsert.Count() > 0)" />
</RadzenStack>

<RadzenDataGrid @ref="_ordersGrid" AllowAlternatingRows="false" AllowPaging="true" PageSize="5" AllowSorting="true" EditMode="@_editMode"
                Data="@_users" TItem="ApplicationUser" Sort="@Reset" Page="@Reset" Filter="@Reset" ColumnWidth="200px">
    <Columns>
        
        <RadzenDataGridColumn Property="Email" Title="email">
        </RadzenDataGridColumn>
        
        <RadzenDataGridColumn Context="order" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Frozen="true" FrozenPosition="FrozenColumnPosition.Right">
            <Template Context="order">
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(order))" @onclick:stopPropagation="true">
                </RadzenButton>
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {
    [Parameter] public Team Team { get; set; }
    
    private RadzenDataGrid<ApplicationUser> _ordersGrid;
    private IEnumerable<ApplicationUser> _users;

    private DataGridEditMode _editMode = DataGridEditMode.Single;

    private readonly List<ApplicationUser> ordersToInsert = new List<ApplicationUser>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await base.OnInitializedAsync();

            var result = await TeamService.ReadFirst(Team.Id, "Workers");
            if (result.Success)
            {
                _users = result.Value.Workers ?? [];
            }
        }
        catch (Exception e)
        {
            NotificationService.ShowExceptionNotification(e);
        }
    }
    
    private void Reset()
    {
        ordersToInsert.Clear();
    }

    private void Reset(ApplicationUser order)
    {
        ordersToInsert.Remove(order);
    }

    private async Task DeleteRow(ApplicationUser user)
    {
        try
        {
            Reset(user);
            var updated = _users.ToList();
            updated.Remove(user);
            _users = updated;
            await _ordersGrid.Reload();

            var result = await TeamService.DeleteWorker(Team.Id, user.Id);
            if (result.Success)
            {
                NotificationService.ShowNotification("Запись успешно удалена", $"{user.Email} удален из команды", NotificationSeverity.Success);
            }
            else
            {
                NotificationService.ShowNotification("Запись не была удалена", result.Message, NotificationSeverity.Info);
            }
            if (_editMode == DataGridEditMode.Single)
            {
                Reset();
            }
        }
        catch (Exception e)
        {
            NotificationService.ShowExceptionNotification(e);
        }
    }

    private async Task InsertRow()
    {
        if (_editMode == DataGridEditMode.Single)
        {
            Reset();
        }

        var result = await DialogService.OpenAsync<AddWorkerToTeamModal>($"Добавление в команду {Team.Name}",
            new Dictionary<string, object>() { { "Team", Team } },
            new DialogOptions()
            {
                // Width = "700px",
                Height = "auto", 
                Resizable = true, Draggable = true
            });
        
        var order = new ApplicationUser();
        ordersToInsert.Add(order);
        await _ordersGrid.InsertRow(order);
    }
}